name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  MIX_ENV: test

jobs:
  test:
    name: Test (Elixir ${{matrix.elixir}} | OTP ${{matrix.otp}})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        elixir: ['1.19.1']
        otp: ['28.1.1']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{matrix.elixir}}
          otp-version: ${{matrix.otp}}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@1.90.0

      - name: Cache Mix dependencies
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-deps-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-deps-

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            native/simhash/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install dependencies
        run: mix deps.get

      - name: Compile dependencies
        run: mix deps.compile

      - name: Compile project (including Rust NIF)
        run: mix compile --warnings-as-errors

      - name: Run Elixir tests
        run: mix test

      - name: Run Rust tests
        run: mix test.rust

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        elixir: ['1.19.1']
        otp: ['28.1.1']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{matrix.elixir}}
          otp-version: ${{matrix.otp}}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@1.90.0

      - name: Cache Mix dependencies
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-deps-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-deps-

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            native/simhash/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache PLT
        id: plt_cache
        uses: actions/cache@v4
        with:
          path: _build/test/dialyxir*.plt
          key: ${{ runner.os }}-plt-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-plt-${{ matrix.otp }}-${{ matrix.elixir }}-

      - name: Install dependencies
        run: mix deps.get

      - name: Compile
        run: mix compile

      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      - name: Run Credo
        run: mix credo --strict

      - name: Run Dialyzer
        run: mix dialyzer --format github

  rust-quality:
    name: Rust Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@1.90.0
        with:
          components: clippy, rustfmt

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            native/simhash/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Clippy
        run: cd native/simhash && cargo clippy -- -D warnings

      - name: Check formatting
        run: cd native/simhash && cargo fmt -- --check
